(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{297:function(t,a,s){"use strict";s.r(a);var n=s(6),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"location-and-population-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#location-and-population-data"}},[t._v("#")]),t._v(" Location and population data")]),t._v(" "),s("p",[t._v("Population genetics involves a focus on... populations (gasp!). The commands below show you how to view and modify both population information (names), and location information (geographic coordinates).")]),t._v(" "),s("h2",{attrs:{id:"location-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#location-data"}},[t._v("#")]),t._v(" Location Data")]),t._v(" "),s("h3",{attrs:{id:"view-location-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#view-location-data"}},[t._v("#")]),t._v(" View location data")]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("locations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("PopData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("View location data ("),s("code",[t._v(".longitude")]),t._v(" and "),s("code",[t._v(".latitude")]),t._v(") in a "),s("code",[t._v("PopData")]),t._v(",  returning a table the longitude and latitude information in "),s("code",[t._v("meta")]),t._v(".")]),t._v(" "),s("Tabs",{attrs:{card:"undefined",stretch:"undefined"}},[s("Tab",{attrs:{label:"locations"}},[s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("julia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" locations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("Tab",{attrs:{label:"output"}},[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Table with 212 rows, 2 columns:\nlongitude  latitude\n───────────────────\n28.3062    -80.5993\n28.3079    -80.5995\n28.3023    -80.5996\n28.6123    -80.4225\n27.8666    -80.3578\n27.8666    -80.3579\n27.8682    -80.3482\n27.8711    -80.3482\n⋮\n30.0696    -86.5376\n29.9065    -86.0905\n30.0532    -87.3661\n30.0522    -87.3662\n29.8234    -85.7143\n29.8234    -85.7143\n")])])])])],1),t._v(" "),s("h3",{attrs:{id:"add-location-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add-location-data"}},[t._v("#")]),t._v(" Add location data")]),t._v(" "),s("p",[t._v("Location data can be added using one of the methods of "),s("code",[t._v("locations!")]),t._v(". As indicated by the bang "),s("code",[t._v("!")]),t._v(", your "),s("code",[t._v("PopData")]),t._v(" will be edited in place, and there will be no return output. If your data is in Decimal Minutes format, this function will convert your long/lat into Decimal Degrees. To import those data into Julia, you'll likely want to use the wonderful "),s("code",[t._v("CSV.jl")]),t._v(" package first.")]),t._v(" "),s("ul",[s("li",[t._v("Decimal Degrees : "),s("code",[t._v("-11.431")])]),t._v(" "),s("li",[t._v("Decimal Minutes : "),s("code",[t._v("-11 43.11")]),t._v(" (notice the space)")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("Must use minus sign")]),t._v(" "),s("p",[t._v("Your data "),s("strong",[t._v("must")]),t._v(" use the minus sign "),s("code",[t._v("-")]),t._v(" (if appropriate) instead of cardinal directions. "),s("code",[t._v("11 43.11W")]),t._v(" is "),s("strong",[t._v("not")]),t._v(" valid.")])]),t._v(" "),s("p",[t._v("There are three main ways of adding location data:")]),t._v(" "),s("Tabs",{attrs:{card:"undefined",stretch:"undefined"}},[s("Tab",{attrs:{label:"Already in decimal degrees"}},[s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("locations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("PopObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" long"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Vector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Vector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" where T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<:")]),t._v("AbstractFloat\n")])])]),s("p",[t._v("This method is pretty straightforward, and it tolerates vectors with "),s("code",[t._v("missing")]),t._v(" data.")]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# generate some fake location data")]),t._v("\njulia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" long "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("212")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" lat "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("212")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\njulia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" locations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" long"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("Tab",{attrs:{label:"Decimal minutes as strings"}},[s("p",[t._v("It would likely be most convenient if you imported your decimal minutes data as vectors of strings, which would look something like this:")]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("lat "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"11 44.31"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-25 41.94"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nlong "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-43 54.11"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"22 23.11"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("For this, the method is")]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("locations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("PopData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" lat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Vector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" long"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Vector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("which uses the "),s("code",[t._v("lat")]),t._v(" and "),s("code",[t._v("long")]),t._v(" keywords.")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("Missing values")]),t._v(" "),s("p",[t._v("This method tolerates "),s("code",[t._v("missing")]),t._v(" values, but you will need to "),s("code",[t._v("replace!")]),t._v(" the string "),s("code",[t._v('"missing"')]),t._v(" with values of "),s("code",[t._v("missing")]),t._v(".")])])]),t._v(" "),s("Tab",{attrs:{label:"Decimal minutes as separate vectors"}},[s("p",[t._v("Alternatively, can input four vectors of numbers with the associated keyword arguments:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Input")]),t._v(" "),s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Keyword Argument")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Vector of longitude degrees")]),t._v(" "),s("td",[t._v("Integer")]),t._v(" "),s("td",[s("code",[t._v("long_deg")])])]),t._v(" "),s("tr",[s("td",[t._v("Vector of longitude minutes")]),t._v(" "),s("td",[t._v("Float")]),t._v(" "),s("td",[s("code",[t._v("long_min")])])]),t._v(" "),s("tr",[s("td",[t._v("Vector of latitude degrees")]),t._v(" "),s("td",[t._v("Integer")]),t._v(" "),s("td",[s("code",[t._v("lat_deg")])])]),t._v(" "),s("tr",[s("td",[t._v("Vector of latitude minutes")]),t._v(" "),s("td",[t._v("Float")]),t._v(" "),s("td",[s("code",[t._v("lat_min")])])])])]),t._v(" "),s("p",[t._v("This method is easier or more tedious depending on what you consider a more practical approach. For example, if you have decimal-minutes coordinates for two samples:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("Longitude")]),t._v(" "),s("th",[t._v("Latitude")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Sample 1")]),t._v(" "),s("td",[t._v("11 43.12")]),t._v(" "),s("td",[t._v("15 36.53")])]),t._v(" "),s("tr",[s("td",[t._v("Sample 2")]),t._v(" "),s("td",[t._v("-12 41.32")]),t._v(" "),s("td",[t._v("11 22.41")])])])]),t._v(" "),s("p",[t._v("then your inputs would be:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("lo_deg = [11, -12]\nlo_min = [43.12, 41.32]\nla_deg  = [15, 11]\nla_min  = [36.53, 22.41]\n")])])]),s("p",[t._v("and you would then use "),s("code",[t._v("locations!")]),t._v(" like this:")]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("locations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" long_deg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lo_deg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" long_min "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lo_min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lat_deg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" la_deg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lat_min "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" la_min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])],1),t._v(" "),s("h2",{attrs:{id:"population-names"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#population-names"}},[t._v("#")]),t._v(" Population Names")]),t._v(" "),s("h3",{attrs:{id:"view-population-names"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#view-population-names"}},[t._v("#")]),t._v(" View population names")]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("populations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("PopData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" listall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Bool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Just as you can view population names with "),s("code",[t._v("PopData.meta.columns.population")]),t._v(", you can also view them with the "),s("code",[t._v("populations")]),t._v(" command, which by default shows you a summary of the number of individuals in each population.")]),t._v(" "),s("Tabs",{attrs:{card:"undefined",stretch:"undefined"}},[s("Tab",{attrs:{label:"populations"}},[s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("julia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" populations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("Tab",{attrs:{label:"output"}},[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('Table with 7 rows, 2 columns:\npopulation        count\n───────────────────────\n"Cape Canaveral"  21\n"Florida Keys"    65\n"Georgia"         30\n"Mideast Gulf"    28\n"Northeast Gulf"  20\n"South Carolina"  28\n"Southeast Gulf"  20\n')])])])])],1),t._v(" "),s("p",[t._v("You can use the keyword "),s("code",[t._v("listall=true")]),t._v(" to display each individual and their associated population as a table.")]),t._v(" "),s("Tabs",{attrs:{card:"undefined",stretch:"undefined"}},[s("Tab",{attrs:{label:"listall = true"}},[s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("julia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" populations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listall"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("Tab",{attrs:{label:"output"}},[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('Table with 212 rows, 2 columns:\nname       population\n───────────────────────────\n"cc_001"   "Cape Canaveral"\n"cc_002"   "Cape Canaveral"\n"cc_003"   "Cape Canaveral"\n"cc_005"   "Cape Canaveral"\n"cc_007"   "Cape Canaveral"\n"cc_008"   "Cape Canaveral"\n"cc_009"   "Cape Canaveral"\n"cc_010"   "Cape Canaveral"\n⋮\n"seg_026"  "Southeast Gulf"\n"seg_027"  "Southeast Gulf"\n"seg_028"  "Southeast Gulf"\n"seg_029"  "Southeast Gulf"\n"seg_030"  "Southeast Gulf"\n"seg_031"  "Southeast Gulf"\n')])])])])],1),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("alias functions")]),t._v(" "),s("p",[t._v("You can use the command "),s("code",[t._v("population")]),t._v(" for the same functionality. We made the commands "),s("code",[t._v("population")]),t._v(" and "),s("code",[t._v("populations")]),t._v(" synonymous so you wouldn't have to memorize if the name was singular or plural-- it just works! This also applies to "),s("code",[t._v("populations!")]),t._v(" and "),s("code",[t._v("population!")])])]),t._v(" "),s("h3",{attrs:{id:"rename-populations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rename-populations"}},[t._v("#")]),t._v(" Rename populations")]),t._v(" "),s("p",[t._v("There are a handful of methods to alter "),s("code",[t._v("PopData")]),t._v(" population names depending on what you find most convenient. Each of these methods start with "),s("code",[t._v("populations!()")]),t._v(" and vary in their inputs. It's for that reason this function has an obnoxiously long docstring. For simplicity, the methods will be separated into categories. However, all the methods for "),s("code",[t._v("populations!")]),t._v(" are unified in that they edit "),s("code",[t._v("PopData")]),t._v(" in place, and print (rather than return) a table of the new population names and counts courtesy of "),s("code",[t._v("populations()")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"replace-by-matching"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace-by-matching"}},[t._v("#")]),t._v(" Replace by matching")]),t._v(" "),s("p",[t._v("These methods require that some kind of population information is already present, in the sense that the samples in "),s("code",[t._v("PopData")]),t._v(" aren't all in one population.")]),t._v(" "),s("Tabs",{attrs:{card:"undefined",stretch:"undefined"}},[s("Tab",{attrs:{label:"using a Dictionary"}},[s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("populations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("PopData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Rename existing population ID's of "),s("code",[t._v("PopData")]),t._v(" using a "),s("code",[t._v("Dict")]),t._v(" of\n"),s("code",[t._v("population_name => replacement")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create a dictionary of name conversions")]),t._v("\njulia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" new_popnames "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cape Canaveral"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Georgia"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"South Carolina"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Florida Keys"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mideast Gulf"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Northeast Gulf"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    \t\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Southeast Gulf"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\n\njulia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" populations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_popnames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nTable with "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" rows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" columns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\npopulation  count\n─────────────────\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("79")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),t._v("      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("133")]),t._v("\n")])])])]),t._v(" "),s("Tab",{attrs:{label:"Using a Vector of names"}},[s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("populations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("PopData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Vector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("Vector")]),t._v(" of new unique population names in the order that they appear in the "),s("code",[t._v("PopData.meta")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("julia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" new_popnames "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\njulia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" populations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_popnames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nTable with "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" rows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" columns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\npopulation  count\n─────────────────\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("79")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),t._v("      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("133")]),t._v("\n")])])])]),t._v(" "),s("Tab",{attrs:{label:"Using a Vector of oldnames and new names"}},[s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("populations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("PopData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldnames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Vector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newnames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Vector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Similar to the "),s("code",[t._v("Dict")]),t._v(' method, except instead of creating a dictionary of "oldname" => "newname", you input a Vector{String} of '),s("code",[t._v("oldnames")]),t._v(" followed by another of "),s("code",[t._v("newnames")]),t._v(". Logically, the new names will replace the old names in the same order as they appear in "),s("code",[t._v("PopData.meta")]),t._v(" (e.g. the first newname replaces the first oldname, etc.).")]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("julia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" old_pop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cape Canaveral"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Florida Keys"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Georgia"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mideast Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Northeast Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"South Carolina"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Southeast Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\njulia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" new_pop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\njulia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" populations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" old_pop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_pop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nTable with "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" rows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" columns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\npopulation  count\n─────────────────\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Atlantic"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("79")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gulf"')]),t._v("      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("133")]),t._v("\n")])])])]),t._v(" "),s("hr"),t._v(" "),s("h4",{attrs:{id:"generate-new-population-information"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generate-new-population-information"}},[t._v("#")]),t._v(" Generate new population information")]),t._v(" "),s("p",[t._v("You may want outright overwrite all current population information. This is particularly useful when importing from VCF format when population information is not provided. This method will completely replace the population names of "),s("code",[t._v("PopData")]),t._v(" regardless of what they currently are.")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("Double-check your population counts")]),t._v(" "),s("p",[t._v("If you're playing along and getting errors that the lengths don't match, then get make sure you're using the right population counts. You can get those numbers with "),s("code",[t._v("populations(sharks)")]),t._v(".")])]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("counts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("and we then also create the vector of the names in the order in which they appear:")]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("popnames "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cape Canaveral"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Florida Keys"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Georgia"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mideast Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Northeast Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"South Carolina"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Southeast Gulf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("Now we can combine them with "),s("code",[t._v("populations!")]),t._v(" to restore the population names to how they were originally")]),t._v(" "),s("Tabs",{attrs:{card:"undefined",stretch:"undefined"}},[s("Tab",{attrs:{label:"Replace using a NamedTuple"}},[s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("julia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" populations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("counts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" counts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" names "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" popnames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nTable with "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" rows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" columns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\npopulation        count\n───────────────────────\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cape Canaveral"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Florida Keys"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Georgia"')]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mideast Gulf"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Northeast Gulf"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"South Carolina"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Southeast Gulf"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n")])])])]),t._v(" "),s("Tab",{attrs:{label:"Replace Using Vectors of names & counts"}},[s("p",[t._v("This is just about the same as using the "),s("code",[t._v("NamedTuple")]),t._v(", but perhaps some users will prefer this format.")]),t._v(" "),s("div",{staticClass:"language-julia extra-class"},[s("pre",{pre:!0,attrs:{class:"language-julia"}},[s("code",[t._v("julia"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" populations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" popnames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" counts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nTable with "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" rows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" columns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\npopulation        count\n───────────────────────\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cape Canaveral"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Florida Keys"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Georgia"')]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mideast Gulf"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Northeast Gulf"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"South Carolina"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Southeast Gulf"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n")])])])])],1)],1)],1)}),[],!1,null,null,null);a.default=e.exports}}]);