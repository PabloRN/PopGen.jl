(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{290:function(t,e,a){"use strict";a.r(e);var s=a(6),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"genepop-format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#genepop-format"}},[t._v("#")]),t._v(" Genepop format")]),t._v(" "),a("h2",{attrs:{id:"import-a-genepop-file-as-popdata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-a-genepop-file-as-popdata"}},[t._v("#")]),t._v(" Import a genepop file as "),a("code",[t._v("PopData")])]),t._v(" "),a("div",{staticClass:"language-julia extra-class"},[a("pre",{pre:!0,attrs:{class:"language-julia"}},[a("code",[t._v("genepop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("infile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" kwargs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example")]),t._v("\njulia"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" genepop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/data/wasp_hive.gen"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" digits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" popsep "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POP"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("Windows users")]),t._v(" "),a("p",[t._v("Make sure to change your backslashes "),a("code",[t._v("\\")]),t._v(" to forward slashes "),a("code",[t._v("/")])])]),t._v(" "),a("h3",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[t._v("#")]),t._v(" arguments")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("infile::String")]),t._v(" : path to genepop file, in quotes")])]),t._v(" "),a("h3",{attrs:{id:"keyword-arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyword-arguments"}},[t._v("#")]),t._v(" keyword Arguments")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("digits::Integer")]),t._v(": number of digits denoting each allele (default: "),a("code",[t._v("3")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("popsep::String")]),t._v(" : word that separates populations in "),a("code",[t._v("infile")]),t._v(' (default: "POP")')]),t._v(" "),a("li",[a("code",[t._v("diploid::Bool")]),t._v("  : whether samples are diploid for parsing optimizations (default: "),a("code",[t._v("true")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("silent::Bool")]),t._v("   : whether to print file information during import (default: "),a("code",[t._v("true")]),t._v(")")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("population names")]),t._v(" "),a("p",[t._v("By default, the file reader will assign numbers as population ID's (as Strings) in order of appearance in the genepop file. Use the "),a("code",[t._v("populations!")]),t._v(" function to rename these with your own population ID's.")])]),t._v(" "),a("h2",{attrs:{id:"format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#format"}},[t._v("#")]),t._v(" Format")]),t._v(" "),a("p",[t._v("Files must follow standard Genepop formatting:")]),t._v(" "),a("ul",[a("li",[t._v("First line is a comment (and skipped)")]),t._v(" "),a("li",[t._v("Loci are listed after first line as one-per-line without commas or in single comma-separated row")]),t._v(" "),a("li",[t._v("A line with a particular and consistent keyword must delimit populations")]),t._v(" "),a("li",[a("strong",[t._v("Must")]),t._v(" be the same word each time and not a unique population name")]),t._v(" "),a("li",[t._v("File is "),a("strong",[t._v("tab")]),t._v(" delimited or "),a("strong",[t._v("space")]),t._v(" delimited, but not both")])]),t._v(" "),a("Tabs",{attrs:{card:"undefined",stretch:"undefined"}},[a("Tab",{attrs:{label:"genepop w/loci stacked vertically"}},[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Wasp populations in New York\nLocus1\nLocus2\nLocus3\nPOP\nOneida_01,\t250230\t564568\t110100\nOneida_02,\t252238\t568558\t100120\nOneida_03,\t254230\t564558\t090100\nPOP\nNewcomb_01,\t254230\t564558\t080100\nNewcomb_02,\t000230\t564558\t090080\nNewcomb_03,\t254230\t000000\t090100\nNewcomb_04,\t254230\t564000\t090120\n")])])])]),t._v(" "),a("Tab",{attrs:{label:"genepop w/loci stacked horizontally"}},[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Wasp populations in New York\nLocus1,Locus2,Locus3\nPOP\nOneida_01,\t250230\t564568\t110100\nOneida_02,\t252238\t568558\t100120\nOneida_03,\t254230\t564558\t090100\nPOP\nNewcomb_01,\t254230\t564558\t080100\nNewcomb_02,\t000230\t564558\t090080\nNewcomb_03,\t254230\t000000\t090100\nNewcomb_04,\t254230\t564000\t090120\n")])])])])],1),t._v(" "),a("h2",{attrs:{id:"acknowledgements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acknowledgements"}},[t._v("#")]),t._v(" Acknowledgements")]),t._v(" "),a("p",[t._v("The original implementations of this parser were written using only Base Julia, and while the speed was fantastic, the memory footprint involved seemed unusually high (~650mb RAM to parse "),a("code",[t._v("gulfsharks")]),t._v(", which is only 3.2mb in size). However, thanks to the efforts of the "),a("a",{attrs:{href:"https://github.com/JuliaData/CSV.jl",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSV.jl"),a("OutboundLink")],1),t._v(" team, we leverage that package to do much of the heavy lifting, in a multicore way, and all the while preserving the speed and reducing the memory footprint quite a bit!")])],1)}),[],!1,null,null,null);e.default=n.exports}}]);